{{define "Type"}}
    {{- $typeName := . -}}

        {{- if eq $typeName "string" -}}
            String
        {{- else if eq $typeName "boolean" -}}
            Boolean
        {{- else if eq $typeName "integer" -}}
            Int
        {{- else if eq $typeName "long" -}}
            Long
        {{- else if eq $typeName "timestamp" -}}
            String
        {{- else if eq $typeName "binary" -}}
            File
        {{- else if eq $typeName "array" -}}
            List
        {{- else if eq $typeName "object" -}}
            Any
        {{- else if eq $typeName "map" -}}
            Map
        {{- else if eq $typeName "any" -}}
            Any
        {{- else -}}
            {{$typeName | camelCase}}Model
        {{- end -}}
{{end}}

{{define "PropertyType"}}
    {{- $property := index . 0 -}}
    {{- $isRequired := index . 1 -}}

    {{- if eq $property.Type "object" -}}
        {{- if $isRequired -}}
            {{template "Type" $property.ExtraType}}
        {{- else -}}
            Option[{{template "Type" $property.ExtraType}}]
        {{end}}
    {{- else if eq $property.Type "array" -}}
        {{- if $isRequired -}}
            List[{{template "Type" $property.ExtraType}}]
        {{- else -}}
            Option[List[{{template "Type" $property.ExtraType}}]]
        {{- end -}}
    {{- else if eq $property.Type "map" -}}
        {{- if $isRequired -}}
            Map[String]{{template "Type" $property.ExtraType}}
        {{- else -}}
            Option[Map[String]{{template "Type" $property.ExtraType}}]
        {{- end -}}
    {{- else if eq $property.Type "any" -}}
        {{- if $isRequired -}}
            {{template "Type" $property.Type}}
        {{- else -}}
            Option[{{template "Type" $property.Type}}]
        {{- end -}}
    {{- else -}}
        {{- if $isRequired -}}
            {{template "Type" $property.Type}}
        {{- else -}}
            Option[{{template "Type" $property.Type}}]
        {{- end -}}
    {{- end -}}
{{end}}

{{define "PropertyParameters"}}
    {{- $data := index . 0 -}}
    {{- $shouldIgnoreFirstComma := index . 1 -}}
    {{- $shouldUseVar := index . 2 -}}

    {{- $firstID := $data | firstPropertyIDInCustomizedType -}}
    {{- range $property := $data.Properties}}
        {{- if or (not $shouldIgnoreFirstComma) (ne $firstID $property.ID)}},{{- end}}
        {{if $property.Description -}}
            // {{$property.Description}}
        {{end -}}
        {{if $property.Enum -}}
            // {{if eq $property.ID "type" -}}typ{{- else -}}{{$property.ID | camelCase | lowerFirst}}{{- end -}}'s available values: {{$property.Enum | commaConnected}}
        {{end -}}
        {{- if $shouldUseVar }}
            var {{if eq $property.ID "type" -}}typ{{- else -}}{{$property.ID | camelCase | lowerFirst}}{{- end -}}:
        {{- else}}
            {{if eq $property.ID "type" -}}typ{{- else -}}{{$property.ID | camelCase | lowerFirst}}{{- end -}}:
        {{- end}}
        {{template "PropertyType" passThrough $property $property.IsRequired}}
        {{- if not $property.IsRequired}} = None {{- end}}
    {{- end}}
{{end}}

{{define "PropertyMethods"}}
    {{- $data := index . 0 -}}
    {{- $location := index . 1 -}}
    {{- $prefix := index . 2 -}}
    {{- $properties := $data.Properties -}}

    {{- if and (eq $prefix "get") (eq $location "QSConstants.ParamsLocationElement")}}
        @ParamAnnotation(location = {{$location}}, name = QSConstants.ParamsLocationElement)
        def getElements: String = JsonObject.fromMap(Map(
        {{- $firstID := $data | firstPropertyIDInCustomizedType -}}
        {{- range $property := $properties}}
            {{- if ne $firstID $property.ID }},{{end}}
            {{- if and (eq $property.Name "objects") (eq ($property.ExtraType | camelCase) "Key")}}
                "{{$property.Name}}" -> {{$property.ID | camelCase | lowerFirst}}.sortBy(_.key).asJson
            {{- else}}
                "{{$property.Name}}" -> {{$property.ID | camelCase | lowerFirst}}.asJson
            {{- end}}
        {{- end}}
        )).asJson.pretty(QSConstants.printer)
    {{- else}}
        {{- range $property := $properties}}
            @ParamAnnotation(location = {{$location}}, name = "{{$property.Name | normalized}}")
            {{- if eq $prefix "get" }}
                def get{{- $property.ID | camelCase}}: {{template "PropertyType" passThrough $property $property.IsRequired}}=
                    this.{{- $property.ID | camelCase | lowerFirst}}
            {{- else }}
                def set{{- $property.ID | camelCase}}({{- $property.ID | camelCase | lowerFirst}}:
                    {{template "PropertyType" passThrough $property $property.IsRequired}}): Unit =
                    this.{{- $property.ID | camelCase | lowerFirst}} = {{- $property.ID | camelCase | lowerFirst}}
            {{- end}}
        {{- end}}
    {{- end}}
{{end}}

{{define "PropertyValidation"}}
    {{- $data := index . 0 -}}

    {{- range $property := $data.Properties -}}
        {{if and (ne $property.Type "integer") (ne $property.Type "long")}}
            {{- if $property.IsRequired}}
                require({{if eq $property.ID "type" -}}typ{{- else -}}{{$property.ID | camelCase | lowerFirst}}{{- end -}} != null,
                    "{{if eq $property.ID "type" -}}typ{{- else -}}{{$property.ID | camelCase | lowerFirst}}{{- end}} can't be empty")
                {{- if  or (eq $property.Type "string") (eq $property.Type "array") (eq $property.Type "map")}}
                    require({{if eq $property.ID "type" -}}typ{{- else -}}{{$property.ID | camelCase | lowerFirst}}{{- end -}}.nonEmpty,
                        """{{if eq $property.ID "type" -}}typ{{- else -}}{{$property.ID | camelCase | lowerFirst}}{{- end}} can't be empty""")
                {{- end}}
            {{- end}}
        {{end}}
        {{- if gt (len $property.Enum) 0}}
            {{- if eq $property.Type "string"}}
                require("{{$property.Enum | commaConnected}}".split(", ").contains({{if eq $property.ID "type" -}}typ{{- else -}}{{$property.ID | camelCase | lowerFirst}}{{- end -}}),
                    """{{if eq $property.ID "type" -}}typ{{- else -}}{{$property.ID | camelCase | lowerFirst}}{{- end}} can only be one of "{{$property.Enum | commaConnected}}" """)
            {{- end}}
            {{- if eq $property.Type "array"}}
                require({{$property.ID | camelCase | lowerFirst}}.forall("{{$property.Enum | commaConnected}}".split(", ").contains(_)),
                    """{{$property.ID | camelCase | lowerFirst}} can only be part of "{{$property.Enum | commaConnected}}"""")
            {{- end}}
        {{- end}}
    {{- end}}
{{end}}

{{define "RenderOperation"}}
    {{- $service := index . 0 -}}
    {{- $operation := index . 1 -}}
    {{- $request := $operation.Request -}}
    {{- $response := $operation.Response -}}

    {{- $hasResponseHeaders := gt (len $response.Headers.Properties) 0 -}}
    {{- $hasResponseElements := gt (len $response.Elements.Properties) 0 -}}
    {{- $hasResponseBodyString := eq $response.Body.Type "string" -}}
    {{- $hasResponseBodyBinary := eq $response.Body.Type "binary" -}}
    {{- $hasOutput := or $hasResponseHeaders $hasResponseElements $hasResponseBodyString $hasResponseBodyBinary -}}

    {{- $belongs := replace $service.Name "QingStor" "Service" -1 -}}
    {{- $belongs := replace $belongs "Object" "Bucket" -1 -}}
    {{- $opID := $operation.ID | camelCase -}}

    {{- if $operation.Description -}}
        {{- if eq $belongs "Bucket" -}}
            // {{replace $opID "Bucket" "" -1}} does {{$operation.Description}}
        {{- else -}}
            // {{$opID}} does {{$operation.Description}}
        {{- end -}}
    {{- end}}
    {{if $operation.DocumentationURL -}}
        // Documentation URL: {{$operation.DocumentationURL}}
    {{- end}}
    {{- if eq $service.Name "Object"}}
        def {{$opID | lowerFirst}}(objectKey: String, input: {{$opID -}}Input): Future[{{- $opID -}}Output] = {
    {{- else if eq $service.Name "Bucket"}}
        def {{replace $opID "Bucket" "" -1 | lowerFirst}}(input: {{$opID -}}Input): Future[{{- $opID -}}Output] = {
    {{- else}}
        def {{$opID | lowerFirst}}(input: {{$opID -}}Input): Future[{{- $opID -}}Output] = {
    {{- end}}
        {{- if eq $service.Name "Bucket"}}
            val request = {{replace $opID "Bucket" "" -1 | lowerFirst}}Request(input)
        {{- else}}
            val request = {{$opID | lowerFirst}}Request({{- if eq $service.Name "Object" -}}objectKey,{{end}}input)
        {{- end}}
        val operation = request.operation
        val futureResponse = request.send()
        ResponseUnpacker.unpackWith{{- if not $hasResponseElements -}}out{{- end -}}Elements[{{- $opID -}}Output](futureResponse, operation).map({
            case Left(errorMessage) => throw new QingStorException(errorMessage)
            case Right(output) => output
        })
    }

    {{if $operation.Description -}}
        {{- if eq $belongs "Bucket" -}}
            // {{replace $opID "Bucket" "" -1}}Request creates request of {{$opID}}.
        {{- else -}}
            // {{$opID}}Request creates request and output object of {{$opID}}.
        {{- end -}}
    {{- end -}}
    {{- if eq $service.Name "Object"}}
        def {{$opID | lowerFirst}}Request(objectKey: String, input: {{$opID -}}Input): QSRequest = {
    {{- else if eq $service.Name "Bucket"}}
        def {{replace $opID "Bucket" "" -1 | lowerFirst}}Request(input: {{$opID -}}Input): QSRequest = {
    {{- else}}
        def {{$opID | lowerFirst}}Request(input: {{$opID -}}Input): QSRequest = {
    {{- end}}
            val operation = Operation (
                config = config,
                apiName = "{{$operation.Name}}",
                method = "{{$request.Method}}",
                requestUri = "{{$request.URI}}",
                {{if $operation.Response.StatusCodes -}}
                    statusCodes = {{range $statusCodeNum, $statusCode := $response.StatusCodes -}}
                                    {{$statusCodeNum}} +: {{if $statusCode.Description -}}// {{$statusCode.Description}}{{end}}
                                {{end -}} Array[Int]()
                {{else}}
                    statusCodes = Array[Int](
                        200 //OK
                    )
                {{end -}}
                {{- if ne $service.Name "QingStor"}}
                    , zone = this.zone,
                {{- if eq $service.Name "Object"}}
                    bucketName = this.bucketName,
                    objectKey = objectKey
                {{- else if eq $service.Name "Bucket"}}
                    bucketName = this.bucketName
                {{- end}}
                {{- end}}
            )
            QSRequest(operation, input)
        }
{{end}}

{{define "RenderProperty"}}
    {{- $operation := index . 0 -}}
    {{- $request := $operation.Request -}}
    {{- $response := $operation.Response -}}

    {{- $hasRequestParams := gt (len $request.Params.Properties) 0 -}}
    {{- $hasRequestHeaders := gt (len $request.Headers.Properties) 0 -}}
    {{- $hasRequestElements := gt (len $request.Elements.Properties) 0 -}}
    {{- $hasRequestBodyString := eq $request.Body.Type "string" -}}
    {{- $hasRequestBodyBinary := eq $request.Body.Type "binary" -}}
    {{- $hasInput := or $hasRequestParams $hasRequestHeaders $hasRequestElements $hasRequestBodyString $hasRequestBodyBinary -}}

    {{- $hasResponseHeaders := gt (len $response.Headers.Properties) 0 -}}
    {{- $hasResponseElements := gt (len $response.Elements.Properties) 0 -}}
    {{- $hasResponseBodyString := eq $response.Body.Type "string" -}}
    {{- $hasResponseBodyBinary := eq $response.Body.Type "binary" -}}
    {{- $hasOutput := or $hasResponseHeaders $hasResponseElements $hasResponseBodyString $hasResponseBodyBinary -}}

    {{- if $hasInput}}
        case class {{$operation.ID}}Input (
            {{if $hasRequestParams -}}
                {{template "PropertyParameters" passThrough $request.Params 1 0}}
            {{end -}}
            {{if $hasRequestHeaders -}}
                {{template "PropertyParameters" passThrough $request.Headers (not $hasRequestParams) 0}}
            {{end -}}
            {{if $hasRequestElements -}}
                {{template "PropertyParameters" passThrough $request.Elements (not (or $hasRequestHeaders $hasRequestParams)) 0}}
            {{end -}}
            {{if (or $hasRequestBodyString $hasRequestBodyBinary) -}}
                {{- if (or $hasRequestElements $hasRequestHeaders $hasRequestParams) -}},{{- end}}
                {{if $request.Body.Description -}}
                    // {{$request.Body.Description}}
                {{- end}}
                {{if eq $request.Body.Type "string"}}
                    body: string
                {{else if eq $request.Body.Type "binary"}}
                    body: File
                {{end}}
                {{- if not $request.Body.IsRequired}}= null{{end}}
            {{end -}}
            ) extends Input {
            {{template "PropertyValidation" passThrough $request.Params}}
            {{template "PropertyValidation" passThrough $request.Headers}}
            {{template "PropertyValidation" passThrough $request.Elements}}
            {{if $hasRequestParams -}}
                {{template "PropertyMethods" passThrough $request.Params "QSConstants.ParamsLocationParam" "get" }}
            {{end}}
            {{if $hasRequestHeaders -}}
                {{template "PropertyMethods" passThrough $request.Headers "QSConstants.ParamsLocationHeader" "get" }}
            {{end}}
            {{if $hasRequestElements -}}
                {{template "PropertyMethods" passThrough $request.Elements "QSConstants.ParamsLocationElement" "get" }}
            {{end}}
            {{if (or $hasRequestBodyString $hasRequestBodyBinary) -}}
                @ParamAnnotation(location = QSConstants.ParamsLocationBody, name = "Body")
                def getBody: {{if eq $request.Body.Type "string"}}String{{else}}File{{end}} = this.body
            {{end}}
        }
    {{- else}}
        case class {{$operation.ID}}Input () extends Input
    {{- end}}

    {{if $hasOutput}}
        {{- if $hasResponseElements}}
        case class {{$operation.ID -}}Output (
        {{- else }}
        class {{$operation.ID -}}Output (
        {{- end}}
            {{if $hasResponseHeaders -}}
                {{template "PropertyParameters" passThrough $response.Headers 1 1 }}
            {{end -}}
            {{if $hasResponseElements -}}
                {{template "PropertyParameters" passThrough $response.Elements (not $hasResponseHeaders) 0}}
            {{end -}}
            {{if (or $hasResponseBodyString $hasResponseBodyBinary)}}
                {{if (or $hasResponseElements $hasResponseHeaders)}},{{- end}}
                {{if $response.Body.Description -}}
                    // {{$response.Body.Description}}
                {{- end}}
                {{if or $hasResponseBodyString $hasResponseBodyBinary}}
                    var body: Array[Byte] = Array.emptyByteArray
                {{end -}}
            {{end}}
            ) extends Output
            {{- if or $hasResponseHeaders $hasResponseBodyString $hasResponseBodyBinary}}{
                def this() = {
                    this(None)
                }

                {{if $hasResponseHeaders -}}
                    {{template "PropertyMethods" passThrough $response.Headers "QSConstants.ParamsLocationHeader" "set" }}
                {{end}}
                {{if (or $hasResponseBodyString $hasResponseBodyBinary) -}}
                    @ParamAnnotation(location = QSConstants.ParamsLocationBody, name = "Body")
                    def setBody(body: Array[Byte]): Unit = this.body = body
                {{end}}
            }
            {{end}}
    {{- else }}
        case class {{$operation.ID -}}Output() extends Output
    {{- end}}

{{end}}